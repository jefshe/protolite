// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_protolite_RCPPEXPORTS_H_GEN_
#define RCPP_protolite_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace protolite {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("protolite", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("protolite", "_protolite_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in protolite");
            }
        }
    }

    inline RawVector cpp_serialize_geobuf(List x, int decimals) {
        typedef SEXP(*Ptr_cpp_serialize_geobuf)(SEXP,SEXP);
        static Ptr_cpp_serialize_geobuf p_cpp_serialize_geobuf = NULL;
        if (p_cpp_serialize_geobuf == NULL) {
            validateSignature("RawVector(*cpp_serialize_geobuf)(List,int)");
            p_cpp_serialize_geobuf = (Ptr_cpp_serialize_geobuf)R_GetCCallable("protolite", "_protolite_cpp_serialize_geobuf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_serialize_geobuf(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(decimals)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<RawVector >(rcpp_result_gen);
    }

    inline Rcpp::RawVector cpp_serialize_pb(Rcpp::RObject x, bool skip_native) {
        typedef SEXP(*Ptr_cpp_serialize_pb)(SEXP,SEXP);
        static Ptr_cpp_serialize_pb p_cpp_serialize_pb = NULL;
        if (p_cpp_serialize_pb == NULL) {
            validateSignature("Rcpp::RawVector(*cpp_serialize_pb)(Rcpp::RObject,bool)");
            p_cpp_serialize_pb = (Ptr_cpp_serialize_pb)R_GetCCallable("protolite", "_protolite_cpp_serialize_pb");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_serialize_pb(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(skip_native)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::RawVector >(rcpp_result_gen);
    }

    inline List cpp_unserialize_geobuf(Rcpp::RawVector x) {
        typedef SEXP(*Ptr_cpp_unserialize_geobuf)(SEXP);
        static Ptr_cpp_unserialize_geobuf p_cpp_unserialize_geobuf = NULL;
        if (p_cpp_unserialize_geobuf == NULL) {
            validateSignature("List(*cpp_unserialize_geobuf)(Rcpp::RawVector)");
            p_cpp_unserialize_geobuf = (Ptr_cpp_unserialize_geobuf)R_GetCCallable("protolite", "_protolite_cpp_unserialize_geobuf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_unserialize_geobuf(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline Rcpp::RObject cpp_unserialize_pb(Rcpp::RawVector x) {
        typedef SEXP(*Ptr_cpp_unserialize_pb)(SEXP);
        static Ptr_cpp_unserialize_pb p_cpp_unserialize_pb = NULL;
        if (p_cpp_unserialize_pb == NULL) {
            validateSignature("Rcpp::RObject(*cpp_unserialize_pb)(Rcpp::RawVector)");
            p_cpp_unserialize_pb = (Ptr_cpp_unserialize_pb)R_GetCCallable("protolite", "_protolite_cpp_unserialize_pb");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_unserialize_pb(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::RObject >(rcpp_result_gen);
    }

}

#endif // RCPP_protolite_RCPPEXPORTS_H_GEN_
